{"version":3,"sources":["Settings/Ble_uuid.ts","components/Ble_connect.ts","components/RadialGauge.tsx","components/Sensor.tsx","components/auto.tsx","Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Ble_uuid","SERVICE_UUID","CHARACTERISTIC_UUID_RX","CHARACTERISTIC_UUID_TX","BleChoice","a","Bluetooth","err_text","console","log","options","filters","services","name","optionalServices","result","type","device","gatt","Connect","device_gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic_RX","characteristic_TX","Characteristic_TX","Characteristic_RX","Server","error","alert","IgrRadialGaugeModule","register","useStyles","makeStyles","theme","root","position","bottom","left","fontSize","RadialGauge","props","classes","characteristic","React","useState","value","setValue","Invalidation","setInvalidation","automaticOperation","setAutomaticOperation","send","newValue","data","Math","floor","datas","String","kvs","sessionStorage","getItem","arrayBuffe","TextEncoder","encode","writeValue","useEffect","valueChanged","isNeedleDraggingEnabled","needleShape","needleBrush","needleOutline","needleEndExtent","needleStrokeThickness","needlePivotShape","needlePivotBrush","needlePivotOutline","needlePivotWidthRatio","needlePivotStrokeThickness","height","width","minimumValue","maximumValue","interval","className","style","header","textAlign","padding","backgroundColor","icon_Placement","margin","color","num_name","Sensor","notify_data","setNottify","startNotifications","addEventListener","event","target","notifVal","TextDecoder","decode","Card","CardHeader","title","CardContent","Typography","variant","component","float","btnName","SetCard","selectedValue","setSelectedValue","handleChange","setItem","Radio","checked","onChange","inputProps","disabled","button","backdrop","zIndex","drawer","buttonIcon","spacing","borderRadius","gauge","top","right","gauges","tempData","marginTop","Automatic","paddingBottom","SmartPhoneMain","connectColor","setColor","count","setCount","setgatt","connected","setServer","setCharacteristic","open","setOpen","IsConnect","res_Choice","res","disconnect","message","BleConnectingTest","clearInterval","BleConnectTestStart","setInterval","err","Backdrop","CircularProgress","Button","onClick","query","App","Container","maxWidth","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1d15681.chunk.js","sourcesContent":["\nconst Ble_uuid =  {\n    SERVICE_UUID :  \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\", // UART service UUID\n    CHARACTERISTIC_UUID_RX: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\", // 受信用\n    CHARACTERISTIC_UUID_TX: \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",// 送信用\n}\n\nexport default Ble_uuid;","import * as Bluetooth from 'react-bluetooth';\nimport Ble_uuid from '../Settings/Ble_uuid';\n\nexport const BleChoice = async () => {\n    //bluetooth可能デバイスか調べる\n    const isAvailable = await Bluetooth.getAvailabilityAsync();\n\n    if (!isAvailable) {\n        const err_text = '現在のデバイスは、bluetoothに対応していません';\n        console.log(err_text);\n        return err_text;\n    }\n\n    // filter\n    const options = {\n        filters: [\n            { services: [Ble_uuid.SERVICE_UUID] },\n            { name: 'SMART KAIRO' },\n        ],\n        optionalServices: [Ble_uuid.SERVICE_UUID]\n    };\n\n    const result = await Bluetooth.requestDeviceAsync(options);\n    if (result.type === 'cancel') {\n        return result.type;\n    }\n    \n    const { device } = result;\n\n    return device.gatt;\n}\n\n// bluetooth connect\nconst Connect = async (device_gatt:any) => {\n    try {\n\n        if (device_gatt) {\n\n            //ble接続\n            const server = await device_gatt.connect();\n            //サービス検出\n            const service = await server.getPrimaryService(Ble_uuid.SERVICE_UUID);\n            // ペリフェラルから受信用\n            const characteristic_RX = await service.getCharacteristic(Ble_uuid.CHARACTERISTIC_UUID_RX);\n            // ペリフェラルに送信用\n            const characteristic_TX = await service.getCharacteristic(Ble_uuid.CHARACTERISTIC_UUID_TX);\n\n            return { gatt: device_gatt, Characteristic_TX: characteristic_TX, Characteristic_RX: characteristic_RX, Server: server };\n\n        } else {\n            console.error(`Error: connected device did not have a GATT`);\n        }\n\n    } catch (message) {\n        alert('デバイスと接続できませんでした。');\n        console.error(`error: ${message}`);\n        return;\n    }\n}\n\nexport default Connect;","import React from 'react';\nimport { IgrRadialGaugeModule } from 'igniteui-react-gauges';\nimport { IgrRadialGauge } from 'igniteui-react-gauges';\nimport { makeStyles } from '@material-ui/core/styles';\n\nIgrRadialGaugeModule.register();\n\nconst useStyles = makeStyles((theme: any) => ({\n    root: {\n        position: 'relative',\n        bottom: 120,\n        left: 206,\n        fontSize: 27,\n\n    }\n}));\n\nconst RadialGauge = (props: any) => {\n\n    const classes = useStyles();\n\n    const characteristic = props.characteristic;\n    const server:boolean = props.server;\n\n    const [value, setValue] = React.useState<string|number>(0);\n    const [Invalidation, setInvalidation] = React.useState<boolean>(false);\n    const [automaticOperation, setAutomaticOperation] = React.useState<string>('on');\n\n    const send = async (newValue: any) => {\n\n        try {\n            if (characteristic === null || !server) {\n                // console.log(\"connectされていない\");\n                return;\n            } else if (characteristic && server) {\n                \n                const data:number = Math.floor(newValue.value);\n\n                const datas:string = String(data);\n\n                let kvs:string|null = sessionStorage.getItem('kvs');\n\n                if (kvs === 'on') {\n                    setValue(data);\n                    setAutomaticOperation(kvs);\n\n                    // alert('自動操作設定になっているので温度設定できません');\n                    return;\n                } else if (kvs === 'off') {\n                    setAutomaticOperation(kvs);\n                    setValue(datas);\n                    var arrayBuffe:Uint8Array = new TextEncoder().encode(datas);\n\n                    await characteristic.writeValue(arrayBuffe);\n                }\n            }\n        } catch {\n            return;\n        }\n    }\n    React.useEffect(() => {\n\n        if (server && characteristic) {\n            setInvalidation(true);\n        } else if(!server && !characteristic){\n            setInvalidation(false);\n            setValue(0);\n        }\n        if (automaticOperation === 'on' && value >= 0) {\n            setValue(0);\n        }\n\n    }, [automaticOperation, characteristic, server, value]);\n    return (\n        <div>\n            <IgrRadialGauge\n                valueChanged={send}\n                value={value}\n                isNeedleDraggingEnabled={Invalidation}\n                // isNeedleDraggingConstrained={true}\n                needleShape=\"NeedleWithBulb\"\n                needleBrush=\"DodgerBlue\"\n                needleOutline=\"DodgerBlue\"\n                needleEndExtent={0.475}\n                needleStrokeThickness={1}\n                needlePivotShape=\"CircleOverlay\"\n                needlePivotBrush=\"#9f9fa0\"\n                needlePivotOutline=\"#9f9fa0\"\n                needlePivotWidthRatio={0.2}\n                needlePivotStrokeThickness={1}\n                height=\"410px\" width=\"440px\"\n                minimumValue={0}\n                maximumValue={100} interval={10}>\n            </IgrRadialGauge>\n            <div className={classes.root}>\n                {value} <span style={{ fontSize: 12 }}>%</span>\n            </div>\n        </div>\n    )\n}\nexport default RadialGauge;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles(() => ({\n    header: {\n        textAlign: 'center',\n        padding: '12px 0px 5px 0px',\n        backgroundColor: '#f0f0f0',\n    },\n    icon_Placement: {\n        margin: '0px 0px 0px 20px',\n        fontSize: 50,\n        color: 'black',\n    },\n    num_name: {\n        fontSize: 25,\n        textAlign: 'center',\n    },\n}));\n\n\n\ninterface SetInformation {\n    title: string,\n    Characteristic_RX: any,\n}\n\n\nconst Sensor = (props: SetInformation) => {\n\n    const classes = useStyles();\n\n    const Characteristic_RX = props.Characteristic_RX;\n\n    const [notify_data, setNottify] = React.useState<number|string>(0);\n\n    React.useEffect(() => {\n        (async () => {\n            if (Characteristic_RX) {\n                const chara = await Characteristic_RX.startNotifications();\n                chara.addEventListener('characteristicvaluechanged', (event: any) => {\n                    let value = event.target.value;\n                    const notifVal:string = new TextDecoder('utf-8').decode(value);\n                    // デバイスからデータ受信\n                    setNottify(notifVal);\n                });\n            } else {\n                setNottify(0);\n                return;\n            }\n        })();\n    }, [Characteristic_RX]);\n    return (\n        <div>\n            <Card>\n                <CardHeader className={classes.header}\n                    title={props.title}\n                />\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n                        <div className={classes.num_name}>\n                            {`${notify_data}℃`}\n                        </div>\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default Sensor;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Radio from '@material-ui/core/Radio';\n\n\nconst useStyles = makeStyles(() => ({\n    header: {\n        textAlign: 'center',\n        padding: '12px 0px 5px 0px',\n        backgroundColor: '#f0f0f0',\n    },\n    icon_Placement: {\n        margin: '0px 0px 0px 20px',\n        fontSize: 50,\n        color: 'black',\n    },\n    num_name: {\n        fontSize: 25,\n        position: 'relative',\n        float: 'right',\n    },\n    btnName: {\n        textAlign: 'center',\n    }\n}));\n\n\ninterface SetInformation {\n    title: string,\n    characteristic_TX: any,\n    server: any,\n}\n\nconst SetCard = (props: SetInformation) => {\n\n    const classes = useStyles();\n\n    const characteristic_TX:any = props.characteristic_TX;\n    const Server:boolean = props.server;\n\n    const [selectedValue, setSelectedValue] = React.useState<any>('on');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\n        if(characteristic_TX){\n            // console.log(event.target.value);\n            const data:string = event.target.value;\n    \n            const arrayBuffe:Uint8Array = new TextEncoder().encode(data);\n                \n            characteristic_TX.writeValue(arrayBuffe);\n            setSelectedValue(data);\n\n            sessionStorage.setItem('kvs', data);\n\n        }\n        return;\n    };\n    React.useEffect(() => {\n        if(!Server){\n            const SelectValue = 'on';\n            sessionStorage.setItem('kvs', SelectValue);\n            setSelectedValue('on');\n        }\n    }, [Server]);\n    return (\n        <Card>\n            <CardHeader className={classes.header}\n                title={props.title}\n            />\n            <CardContent>\n                <Typography className={classes.btnName} variant=\"body2\" color=\"textSecondary\" component=\"div\">\n                    {Server ?\n                        <div>\n                            ON :\n                            <Radio\n                                checked={selectedValue === 'on'}\n                                onChange={handleChange}\n                                value=\"on\"\n                                name=\"radio-button-demo\"\n                                inputProps={{ 'aria-label': 'on' }}\n                            />\n                            OFF :\n                            <Radio\n                                checked={selectedValue === 'off'}\n                                onChange={handleChange}\n                                value=\"off\"\n                                name=\"radio-button-demo\"\n                                inputProps={{ 'aria-label': 'off' }}\n                            />\n                        </div>\n                        :\n                        <div>\n                            ON :\n                            <Radio\n                                checked={selectedValue === 'on'}\n                                value=\"on\"\n                                disabled\n                            />\n                            OFF :\n                            <Radio\n                                checked={selectedValue === 'off'}\n                                value=\"off\"\n                                disabled\n                            />\n                        </div>\n                    }\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default SetCard;","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport BluetoothIcon from '@material-ui/icons/Bluetooth';\nimport MediaQuery from \"react-responsive\";\n\nimport Connect, { BleChoice } from './components/Ble_connect';\nimport RadialGauge from './components/RadialGauge';\nimport Sensor from './components/Sensor';\nimport SetCard from './components/auto';\n\nconst useStyles = makeStyles((theme:any) => ({\n    button: {\n        float: 'right',\n        margin: '20px 5px 0px 0px',\n    },\n    backdrop: {\n        textAlign: 'center',\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    buttonIcon: {\n        margin: theme.spacing(1),\n        width: 60,\n        height: 60,\n        borderRadius: '50%',\n    },\n    gauge: {\n        position: 'relative',\n        top: 75,\n        right: 40\n    },\n    gauges: {\n        position: 'relative',\n        top: 85,\n        left: 56,\n    },\n    tempData: {\n        marginTop: 50,\n    },\n    Automatic: {\n        marginTop: 20,\n        paddingBottom: 20\n    }\n}));\n\nfunction SmartPhoneMain() {\n\n    const classes = useStyles();\n\n    // bluetoothボタン 接続/切断 切り替え  connectColor/ボタンの色  count/0or1 接続か切断\n    const [connectColor, setColor] = React.useState<\"default\" | \"primary\">(\"default\");\n    const [count, setCount] = React.useState<any>(0);\n\n    // bluetoothデバイス情報\n    const [gatt, setgatt] = useState<any>(null);\n    const [server, setServer] = useState<any>({ connected: false });\n    const [characteristic, setCharacteristic] = useState<any>({ Characteristic_TX: null, Characteristic_RX: null });\n\n    // Lord\n    const [open, setOpen] = useState(false);\n\n    const IsConnect = async () => {\n        setOpen(!open);\n\n        // bluetooth connect\n        if (count === 0) {\n\n            //Bleデバイス選択\n            const res_Choice = await BleChoice();\n\n            if (res_Choice === 'cancel') {\n                console.log('cancel');\n                setOpen(false);\n                return;\n            } else if (res_Choice === '現在のデバイスは、bluetoothに対応していません') {\n                alert('現在のデバイスは、bluetoothに対応していません');\n                setOpen(false);\n                return;\n            }\n\n            //選択されたM5stickcの接続\n            const res = await Connect(res_Choice);\n            // console.log(res);\n\n            // データ送信用情報が取得できているか\n            const Characteristic_TX = res ? res.Characteristic_TX : null;\n\n            // データ受信用情報が取得できているか\n            const Characteristic_RX = res ? res.Characteristic_RX : null;\n\n            // connectされた情報が取得できているか\n            const Server = res ? res.Server : null;\n\n            if (Characteristic_TX && Characteristic_RX && Server) {\n\n                if (!Server || !Characteristic_TX || !Characteristic_RX) {\n                    alert('Characteristicは、null\\nbluetooth通信できませんでした');\n                }\n                setgatt(res_Choice);\n                setCharacteristic({ ...characteristic, Characteristic_TX: Characteristic_TX, Characteristic_RX: Characteristic_RX });\n                // setCharacteristic_RX(Characteristic_RX);\n                setServer(Server);\n                setColor('primary');\n                setCount(1);\n            } else {\n                alert('接続できませんでした。');\n            }\n\n        } else if (count === 1) {  // bluetooth disconnect\n            if (!server || !server.connected) {\n                setOpen(false);\n                return;\n            }\n            try {\n                server.disconnect();\n                console.log(server);\n                setCharacteristic({ ...characteristic, Characteristic_TX: null, Characteristic_RX: null });\n                setColor('default');\n                setCount(0);\n\n            } catch (message) {\n                console.log(message);\n            }\n        }\n        setOpen(false);\n    }\n    React.useEffect(() => {\n        (() => {\n            // console.log(count);\n            if (count === 1) {\n                async function BleConnectingTest() {\n                    gatt.connect();\n                    // console.log(server);\n                    if (server.connected === false) {\n                        clearInterval(BleConnectTestStart);\n                        setCharacteristic({ ...characteristic, Characteristic_TX: null, Characteristic_RX: null });\n                        setColor('default');\n                        setCount(0);\n                        console.log('intervalを止めます。');\n                    }\n                }\n                const BleConnectTestStart = setInterval(async () => {\n                    try {\n                        BleConnectingTest();\n                    } catch (err) {\n                        console.log(err);\n                    }\n                }, 1000);\n            }\n        })();\n    }, [characteristic, count, gatt, server]);\n    return (\n        <div>\n            <div>\n                <Backdrop className={classes.backdrop} open={open}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <div className={classes.button}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={IsConnect}\n                        color={connectColor}\n                        className={classes.buttonIcon}\n                    >\n                        < BluetoothIcon />\n                    </Button>\n                </div>\n            </div>\n            <div>\n                {/* スマホ用 */}\n                <MediaQuery query=\"(max-width: 767px)\">\n                    <div className={classes.gauge}>\n                        {/* デバイス送信 */}\n                        < RadialGauge characteristic={characteristic.Characteristic_TX} server={server.connected} />\n                    </div>\n                </MediaQuery>\n                {/* pc用 */}\n                <MediaQuery query=\"(min-width: 768px)\">\n                    <div className={classes.gauges}>\n                        {/* デバイス送信 */}\n                        < RadialGauge characteristic={characteristic.Characteristic_TX} server={server.connected} />\n                    </div>\n                </MediaQuery>\n                {/* デバイス値受信 */}\n                <div className={classes.tempData}>\n                    < Sensor Characteristic_RX={characteristic.Characteristic_RX} title='Temp' />\n                </div>\n                {/* デバイス値受信 */}\n                <div className={classes.Automatic}>\n                    < SetCard characteristic_TX={characteristic.Characteristic_TX} server={server.connected} title='auto' />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SmartPhoneMain;","import React from 'react';\nimport Main from './Main';\nimport { Container } from '@material-ui/core';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Container maxWidth=\"sm\">\n        < Main />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}